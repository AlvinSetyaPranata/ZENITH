
# services:
#   setup:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
#     container_name: setup
#     user: "0"
#     command: >
#       bash -c '
#         # Ensure .env file is loaded

#         # Check if environment variables are set
#         if [ x${ELASTIC_PASSWORD} == x ]; then
#           echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
#           exit 1;
#         elif [ x${KIBANA_PASSWORD} == x ]; then
#           echo "Set the KIBANA_PASSWORD environment variable in the .env file";
#           exit 1;
#         fi;

#         # Check for existing CA
#         if [ ! -f config/certs/ca.zip ]; then
#           echo "Creating CA";
#           bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
#           unzip config/certs/ca.zip -d config/certs;
#         else
#           echo "CA already exists, skipping creation.";
#         fi;

#         # Check for existing certificates
#         if [ ! -f config/certs/certs.zip ]; then
#           echo "Creating certs";
#           echo -ne \
#           "instances:\n"\
#           "  - name: es01\n"\
#           "    dns:\n"\
#           "      - es01\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           "  - name: kibana\n"\
#           "    dns:\n"\
#           "      - kibana\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           > config/certs/instances.yml;
#           bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
#           unzip config/certs/certs.zip -d config/certs;
#         else
#           echo "Certificates already exist, skipping creation.";
#         fi;

#         # Set file permissions
#         echo "Setting file permissions"
#         chown -R root:root config/certs;
#         find . -type d -exec chmod 750 \{\} \;;
#         find . -type f -exec chmod 640 \{\} \;;
        

#         # Wait for Elasticsearch availability
#         until curl -s --cacert config/certs/ca/ca.crt https://es01:9200/_cluster/health?wait_for_status=green | grep '"status":"green"'; do sleep 10; done;


#         # Set kibana_system password
#         echo "Setting kibana_system password";
#         until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;


#         # Wait for Kibana to be ready
#         echo "Waiting for Kibana to be ready";
#         until curl -s -I http://kibana:5601 | grep -q "HTTP/1.1 302 Found"; do sleep 10; done;

#         echo "All done!";
#       '

#     volumes:
#       - ${ENV_ROOT_DIR}/elasticsearch/certs:/usr/share/elasticsearch/config/certs
#       - ${ENV_ROOT_DIR}/kibana/certs:/usr/share/kibana/config/certs
#     healthcheck:
#       test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
#       interval: 1s
#       timeout: 5s
#       retries: 120

#   es01:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
#     container_name: es01
#     env_file: .env
#     environment:
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#     volumes:
#       - ${ENV_ROOT_DIR}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
#       - ${ELASTIC_CERT}:/usr/share/elasticsearch/config/certs
#       - ${ENV_ROOT_DIR}/elasticsearch/data:/usr/share/elasticsearch/data
#       - ${ENV_ROOT_DIR}/elasticsearch/backup:/usr/share/elasticsearch/backup
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     ports:
#       - 9200:9200
#     depends_on:
#       setup:
#         condition: service_healthy
#     mem_limit: ${ES_MEM_LIMIT}
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120

#   kibana:
#     image: docker.elastic.co/kibana/kibana:8.11.1
#     container_name: kibana
#     depends_on:
#       es01:
#         condition: service_healthy
        
#     env_file: .env
#     volumes:
#       - ${ELASTIC_CERT}:/usr/share/kibana/config/certs
#       - ${KIBANA_DATA}:/usr/share/kibana/data
#     ports:
#       - 5601:5601
#     mem_limit: ${KB_MEM_LIMIT}
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120


services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - XPACK_SECURITY_ENABLED=false
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

volumes:
  esdata:
